/*
 * Copyright (c) 2023 PHYTEC Messtechnik GmbH
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include <zephyr/drivers/gpio.h>

#ifndef ZEPHYR_DRIVERS_SENSOR_TMD2635_TMD2635_H_
#define ZEPHYR_DRIVERS_SENSOR_TMD2635_TMD2635_H_

#define TMD2635_CHIP_ID 0X44

#define TMD2635_ENABLE_REG 0x80
#define TMD2635_ENABLE_PWEN                                                                        \
	BIT(4) // This bit activates the proximity wait feature which is set by the PWTIME register.
	       // Active high.
#define TMD2635_ENABLE_PEN BIT(2) // This bit activates the proximity detection. Active high.
#define TMD2635_ENABLE_PON                                                                         \
	BIT(0) // This field activates the internal oscillator and ADC channel. Active high.

/* This register defines the duration of 1 proximity sample,
 * which is (PRATE + 1)*88µs.
 */
#define TMD2635_PRATE_REG 0x82

/*
 * PILT Register defines the low interrupt threshold.
 * If the value generated by the proximity channel is below the
 * threshold, PPERS value is reached and PIEN is enabled, the INT pin will be asserted
 */
#define TMD2635_PILTL_REG 0x88

/*
 * PILT Register defines the low interrupt threshold.
 * If the value generated by the proximity channel is below the
 * threshold, PPERS value is reached and PIEN is enabled, the INT pin will be asserted
 */
#define TMD2635_PILTH_REG 0x89

/*
 * PIHTL Register defines the high interrupt threshold.
 * If the value generated by the proximity channel is above the
 * threshold, PPERS value is reached and PIEN is enabled, the INT pin will be asserted
 */
#define TMD2635_PIHTL_REG 0x8A

/*
 * PIHTH Register defines the high interrupt threshold.
 * If the value generated by the proximity channel is above the
 * threshold, PPERS value is reached and PIEN is enabled, the INT pin will be asserted
 */
#define TMD2635_PIHTH_REG 0x8B

/*
 * PERS register controls the interrupt filtering capabilities.
 * With the PPERS bits its possible to configure how many values out of
 * the threshold have to be generated until a interrupt is generated.
 * 0: every read cycle
 * 1: any proximiy value outside of range
 * 2: 2 consecutive values outside of range
 * ...
 */
#define TMD2635_PERS_REG   0x8C
#define TMD2635_PERS_PPERS (BIT(4) | BIT(5) | BIT(6) | BIT(7))

/*
 * When PWLONG (PROX Wait Long) is asserted the wait
 * period as set by PWTIME is increased by a factor of 12.
 */
#define TMD2635_CFG0_REG    0x8D
#define TMD2635_CFG0_PWLONG BIT(2)

#define TMD2635_PCFG0_REG      0x8E
/* This field sets the gain of the proximity IR sensor. */
#define TMD2635_PCFG0_PGAIN_X1 0
#define TMD2635_PCFG0_PGAIN_X2 BIT(6)
#define TMD2635_PCFG0_PGAIN_X4 BIT(7)
#define TMD2635_PCFG0_PGAIN_X8 (BIT(6) | BIT(7))

/* Maximum number of pulses in a single proximity cycle. */
#define TMD2635_PCFG0_PPULSE (BIT(0) | BIT(1) | BIT(2) | BIT(3) | BIT(4) | BIT(5))

#define TMD2635_PCFG1_REG             0x8F
/* pulse length */
#define TMD2635_PCFG1_PPULSE_LEN_1US  0
#define TMD2635_PCFG1_PPULSE_LEN_2US  BIT(5)
#define TMD2635_PCFG1_PPULSE_LEN_4US  BIT(6)
#define TMD2635_PCFG1_PPULSE_LEN_8US  (BIT(5) | BIT(6))
#define TMD2635_PCFG1_PPULSE_LEN_12US BIT(7)
#define TMD2635_PCFG1_PPULSE_LEN_16US (BIT(5) | BIT(7))
#define TMD2635_PCFG1_PPULSE_LEN_24US (BIT(6) | BIT(7))
#define TMD2635_PCFG1_PPULSE_LEN_32US (BIT(5) | BIT(6) | BIT(7))

#define TMD2635_PCFG1_PPULSE_LEN_MASK TMD2635_PCFG1_PPULSE_LEN_32US

/* This field sets the drive strength of the IR VCSEL current.
 * Values are approximate; actual current through VCSEL is
 * factory trimmed to normalize IR intensity. For lowest part
 * to part variation, 7mA is recommended.
 */
#define TMD2635_PCFG1_PLDRIVE (BIT(0) | BIT(2))

#define TMD2635_REVID_REG 0x91

#define TMD2635_ID_REG 0x92

#define TMD2635_STATUS_REG             0x9B
#define TMD2635_STATUS_PHIGH           BIT(7)
#define TMD2635_STATUS_PLOW            BIT(6)
#define TMD2635_STATUS_PSAT            BIT(5)
#define TMD2635_STATUS_PINT            BIT(4)
#define TMD2635_STATUS_CINT            BIT(3)
#define TMD2635_STATUS_ZINT            BIT(2)
#define TMD2635_STATUS_PSAT_REFLECTIVE BIT(1)
#define TMD2635_STATUS_PSAT_AMBIENT    BIT(0)

/* PDATA contains the 1-byte proximity data */
#define TMD2635_PDATAL_REG 0x9C
#define TMD2635_PDATAH_REG 0x9D

#define TMD2635_REVID2_REG    0x9E
#define TMD2635_REVID2_AUX_ID (BIT(0) | BIT(1) | BIT(2) | BIT(3))

#define TMD2635_REVID2_REG   0xA6 // Revision ID two 0x01 or 0x0E
#define TMD2635_SOFTREST_REG 0xA8

/* Value that specifies the wait time in 2.78ms increments.
 * The wait timer is implemented using a down counter.
 * Wait time = increment x 2.78ms. If PWLONG is enabled (bit 3 in CFG0),
 * then wait time = increment x 2.78ms x 12
 *
 * --------------------------------------------------
 *   Value    |    Invrement    |    Wait Time
 * --------------------------------------------------
 *   0x00     |        1        |     2.78ms (33.4ms)
 * --------------------------------------------------
 *   0x01     |        2        |     5.56ms (66.7ms)
 * --------------------------------------------------
 *   0x11     |        18       |     50.0ms (600 ms)
 * --------------------------------------------------
 *   0x23     |        36       |     100 ms (1.20 s)
 * --------------------------------------------------
 *   0x3f     |        64       |     178 ms (2.14 s)
 * --------------------------------------------------
 *   0xff     |       256       |     712 ms (8.54 s)
 * --------------------------------------------------
 */
#define TMD2635_PWTIME_REG 0xA9

#define TMD2635_CFG8_REG           0xAA
#define TMD2635_CFG8_PDSELECT_FAR  BIT(0)          // Far photodiode
#define TMD2635_CFG8_PDSELECT_NEAR BIT(1)          // Near photodiode default
#define TMD2635_CFG8_PDSELECT_BOTH BIT(0) | BIT(1) // Both photodiode default

#define TMD2635_CFG3_REG            0xAB
/* INT_READ_CLEAR If set, then flag bits in the STATUS register will be reset whenever the STATUS
 * register is read over I²C. */
#define TMD2635_CFG3_INT_READ_CLEAR BIT(7)
/* SAI The sleep after interrupt bit is used to place the
 * device into a low power mode upon an interrupt pin assertion.
 */
#define TMD2635_CFG3_SAI            BIT(4)

/*
 * Proximity automatic pulse control (APC) disable.
 * 0 = APC enable
 * 1 = APC disable
 */
#define TMD2635_CFG6_REG         0xAE
#define TMD2635_CFG6_APC_DISABLE BIT(6)

#define TMD2635_PFILTER_REG     0xB3
#define TMD2635_PFILTER_PMAVG_2 BIT(0)
#define TMD2635_PFILTER_PMAVG_4 BIT(1)
#define TMD2635_PFILTER_PMAVG_8 BIT(0) | BIT(1)

#define TMD2635_POFFSET_L_REG 0xC0
#define TMD2635_POFFSET_H_REG 0xC1

#define TMD2635_CALIB_REG 0xD7

/*
 * Enables proximity hardware averaging as selected with PROX_AVG during calibration.
 * 0 = No hardware averaging
 * 1 = Hardware averaging enabled
 */
#define TMD2635_CALIBCALAVG                  BIT(7)
/*
 * Selects proximity calibration type.
 * 0 = Electrical and optical crosstalk.
 * 1 = Electrical crosstalk only.
 */
#define TMD2635_CALIB_ELECTRICAL_CALIBRATION BIT(5)
/*
 * Enables PRATE during calibration. Useful when averaging
 * is enabled.
 * 0 = PRATE ignored
 * 1 = PRATE applied between averaging samples
 */
#define TMD2635_CALIB_CALPRATE               BIT(4)
#define TMD2635_CALIB_START_OFFSET_CALIB     BIT(0) // Set to 1 to start a calibration sequence.

#define TMD2635_CALIBCFG_REG                     0xD9
#define TMD2635_CALIBCFG_BINSRCH_TARGET          (BIT(5) | BIT(6) | BIT(7))
#define TMD2635_CALIBCFG_PROX_AUTO_OFFSET_ADJUST BIT(3)
#define TMD2635_CALIBCFG_PRX_DATA_AVG            (BIT(0) | BIT(1) | BIT(2))

#define TMD2635_CALIBSTAT_REG             0xDC
#define TMD2635_CALIBSTAT_OFFSET_ADJUSTED BIT(2)
#define TMD2635_CALIBSTAT_CALIB_FINISHED  BIT(0)

#define TMD2635_INTENAB_REG   0xDD
/* The PIM (Proximity Interrupt Mode) bit selects the condition
 * under which the PINT status bit and the corresponding
 * interrupt (if enabled with PIEN) will be asserted.
 */
#define TMD2635_INTENAB_PIM   BIT(5)
#define TMD2635_INTENAB_PIEN  BIT(4)
#define TMD2635_INTENAB_PSIEN BIT(3)
#define TMD2635_INTENAB_CIEN  BIT(2)
#define TMD2635_INTENAB_ZIEN  BIT(1)

#define TMD2635_PGAIN_DEFAULT      TMD2635_PCFG1_PGAIN_X4
#define TMD2635_PLDRIVE_DEFAULT    7
#define TMD2635_PPULSE_DEFAULT     15
#define TMD2635_PPULSE_LEN_DEFAULT TMD2635_PCFG0_PPULSE_LEN_16US

struct tmd2635_config {
	struct i2c_dt_spec i2c;
	struct gpio_dt_spec int_gpio;
	uint8_t inst;
	uint8_t proximity_gain;
	uint8_t proximity_pulse_length;
	uint8_t proximity_pulse_count;
	uint16_t proximity_high_threshold;
	uint16_t proximity_low_threshold;
	uint8_t proximity_led_drive_strength;
	uint8_t proximity_interrupt_filter;
	uint8_t proximity_sample_duration;
	uint8_t enable_wait_mode;
	uint8_t wait_time_factor;
	uint8_t wait_long;
};

struct tmd2635_data {
	struct gpio_callback gpio_cb;
	const struct device *dev;
	uint8_t pdata_low;
	uint8_t pdata_high;

#ifdef CONFIG_TMD2635_TRIGGER
	sensor_trigger_handler_t p_th_handler;
	const struct sensor_trigger *p_th_trigger;
	struct k_work work;
#else
	struct k_sem data_sem;
#endif
};

static void tmd2635_setup_int(const struct tmd2635_config *config, bool enable)
{
	unsigned int flags = enable ? GPIO_INT_EDGE_TO_ACTIVE : GPIO_INT_DISABLE;

	gpio_pin_interrupt_configure_dt(&config->int_gpio, flags);
}

#ifdef CONFIG_TMD2635_TRIGGER
void tmd2635_work_cb(struct k_work *work);

int tmd2635_attr_set(const struct device *dev, enum sensor_channel chan, enum sensor_attribute attr,
		     const struct sensor_value *val);

int tmd2635_trigger_set(const struct device *dev, const struct sensor_trigger *trigg,
			sensor_trigger_handler_t handler);
#endif

#endif /* ZEPHYR_DRIVERS_SENSOR_TMD2635_TMD2635_H_ */
