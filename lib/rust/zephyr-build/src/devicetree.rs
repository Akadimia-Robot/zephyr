//! Incorporating Zephyr's devicetree into Rust.
//!
//! Zephyr depends fairly heavily on the devicetree for configuration.  The build system reads
//! multiple DTS files, and coalesces this into a single devicetree.  This tree is output in a few
//! different ways:
//!
//! - Canonical DTS.  There is a single DTS file (`build/zephyr/zephyr.dts`) that contains the final
//! tree, but still in DTS format (the DTB file would have information discarded).
//!
//! - Generated.  The C header `devicetree_generated.h` contains all of the definitions.  This isn't
//! a particularly friendly file to read or parse, but it does have one piece of information that is
//! not represented anywhere else: the mapping between devicetree nodes and their "ORD" index.  The
//! device nodes in the system are indexed by this number, and we need this in order to be able to
//! reference the nodes from Rust.
//!
//! Beyond the ORD field, it seems easier to deal with the DTS file itself.  Parsing is fairly
//! straightforward, as it is a subset of the DTS format, and we only have to be able to deal with
//! the files that are generated by the Zephyr build process.

// TODO: Turn this off.
#![allow(dead_code)]

use ordmap::OrdMap;
use std::{cell::RefCell, collections::BTreeMap, path::Path, rc::Rc};

mod parse;
mod ordmap;
mod output;

pub struct DeviceTree {
    /// The root of the tree.
    root: Rc<Node>,
    /// All of the labels.
    labels: BTreeMap<String, Rc<Node>>,
}

// This is a single node in the devicetree.
pub struct Node {
    // The name of the node itself.
    name: String,
    // The full path of this node in the tree.
    path: String,
    // The "route" is the path, but still as separate entries.
    route: Vec<String>,
    // The ord index in this particular Zephyr build.
    ord: usize,
    // Labels attached to this node.
    labels: Vec<String>,
    // Any properties set in this node.
    properties: Vec<Property>,
    // Children nodes.
    children: Vec<Rc<Node>>,
}

#[derive(Debug)]
pub struct Property {
    pub name: String,
    pub value: Vec<Value>,
}

// Although the real device flattends all of these into bytes, Zephyr takes advantage of them at a
// slightly higher level.
#[derive(Debug)]
pub enum Value {
    Words(Vec<Word>),
    Bytes(Vec<u8>),
    Phandle(Phandle), // TODO
    String(String),
}

/// A phandle is a named reference to a labeled part of the DT.  We resolve this by making the
/// reference optional, and filling them in afterwards.
pub struct Phandle {
    /// The label of our target.  Keep this because it may be useful to know which label was used,
    /// as nodes often have multiple labels.
    name: String,
    /// The inside of the node, inner mutability so this can be looked up and cached.
    node: RefCell<Option<Rc<Node>>>,
}

#[derive(Debug)]
pub enum Word {
    Number(u32),
    Phandle(Phandle),
}

impl DeviceTree {
    /// Decode the zephyr.dts and devicetree_generated.h files from the build and build an internal
    /// representation of the devicetree itself.
    pub fn new<P1: AsRef<Path>, P2: AsRef<Path>>(dts_path: P1, dt_gen: P2) -> DeviceTree {
        let ords = OrdMap::new(dt_gen);

        let dts = std::fs::read_to_string(dts_path)
            .expect("Reading zephyr.dts file");
        let dt = parse::parse(&dts, &ords);
        dt.resolve_phandles();
        dt
    }

    /// Walk the node tree, fixing any phandles to include their reference.
    fn resolve_phandles(&self) {
        self.root.phandle_walk(&self.labels);
    }
}

impl Node {
    fn phandle_walk(&self, labels: &BTreeMap<String, Rc<Node>>) {
        for prop in &self.properties {
            for value in &prop.value {
                value.phandle_walk(labels);
            }
        }
        for child in &self.children {
            child.phandle_walk(labels);
        }
    }
}

impl Value {
    fn phandle_walk(&self, labels: &BTreeMap<String, Rc<Node>>) {
        match self {
            Value::Phandle(ph) => ph.phandle_resolve(labels),
            Value::Words(words) => {
                for w in words {
                    match w {
                        Word::Phandle(ph) => ph.phandle_resolve(labels),
                        _ => (),
                    }
                }
            }
            _ => (),
        }
    }
}

impl Phandle {
    /// Construct a phandle that is unresolved.
    pub fn new(name: String) -> Phandle {
        Phandle {
            name,
            node: RefCell::new(None),
        }
    }

    /// Resolve this phandle, with the given label for lookup.
    fn phandle_resolve(&self, labels: &BTreeMap<String, Rc<Node>>) {
        // If already resolve, just return.
        if self.node.borrow().is_some() {
            return;
        }

        let node = labels.get(&self.name).cloned()
            .expect("Missing phandle");
        *self.node.borrow_mut() = Some(node);
    }

    /// Get the child node, panicing if it wasn't resolved properly.
    fn node_ref(&self) -> Rc<Node> {
        self.node.borrow().as_ref().unwrap().clone()
    }
}

// To avoid recursion, the debug printer for Phandle just prints the name.
impl std::fmt::Debug for Phandle {
    fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(fmt, "Phandle({:?})", self.name)
    }
}
